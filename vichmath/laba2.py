"""
Решение нелинейных уравнений методами бисекции, простых итераций и Ньютона
"""

ep = 1e-5  # точность решения
a, b = 0, 2  # интервал для метода бисекции
x0 = 0.25  # начальное приближение для методов Ньютона и простых итераций
max_iter = 100  # максимальное количество итераций


def f(x):
    return x ** 2 - 2  # исходная функция


def bisection(f, ep, a, b):
    """
    Метод бисекции (дихотомии) для нахождения корня функции на интервале [a, b]
    """
    while (b - a) / 2 > ep:
        mid = (a + b) / 2  # находим середину интервала
        if f(mid) == 0:  # если значение функции в mid равно нулю, возвращаем mid
            return mid
        elif f(a) * f(mid) < 0:  # корень в левой половине
            b = mid
        else:  # корень в правой половине
            a = mid
    return (a + b) / 2  # возвращаем середину интервала как приближенное значение корня


def f1(x):
    return (2 + x ** 2) / (2 * x)  # преобразование к виду x = g(x)


def simple_iter(f1, x0, ep, max_iter):
    """
    Метод простых итераций для нахождения корня
    """
    x_prev = x0  # начальное приближение
    for cnt in range(max_iter):
        x_next = f1(x_prev)  # вычисление следующего значения
        if abs(x_next - x_prev) < ep:  # проверка достижения точности
            return x_next, cnt  # возвращаем найденный корень и количество итераций
        x_prev = x_next
    return x_next, max_iter  # возвращаем последнее приближение и max_iter, если точность не достигнута


def df(x):
    return 2 * x  # производная функции


def newton(f, df, x0, ep):
    """
    Метод Ньютона для нахождения корня функции
    """
    x = x0
    while True:
        x_next = x - f(x) / df(x)  # расчет следующего приближения
        if abs(x_next - x) < ep:  # проверка достижения точности
            return x_next  # возвращаем корень
        x = x_next  # обновляем для следующей итерации


def main():
    root, cnt = simple_iter(f1, x0, ep, max_iter)
    print(f"Метод простых итераций: корень = {root}, итераций = {cnt}")

    root = newton(f, df, x0, ep)
    print(f"Метод Ньютона: корень = {root}")

    root = bisection(f, ep, a, b)
    print(f"Метод бисекции: корень = {root}")


if __name__ == "__main__":
    main()
